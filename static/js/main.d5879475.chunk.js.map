{"version":3,"sources":["components/Card/index.jsx","components/Main/index.jsx","mock.js","App.js","serviceWorker.js","index.js"],"names":["Card","number","data","messageSelected","messageDefault","messageDisabled","useState","hover","setHover","selected","setSelected","selectedHandler","setColorTextState","quantity","color","text","className","style","backgroundColor","onClick","onMouseEnter","onMouseLeave","href","title","taste","portions","gift","isHappy","weight","class","e","preventDefault","Main","map","el","i","key","like","name","borderColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5879475.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Card = ({ data = [] }) => {\r\n  const { messageSelected, messageDefault, messageDisabled } = data;\r\n  const [hover, setHover] = useState(false);\r\n  const [selected, setSelected] = useState(false);\r\n\r\n  const selectedHandler = () => setSelected(!selected);\r\n\r\n  const setColorTextState = () => {\r\n    if (data.quantity <= 0) {\r\n      return { color: \"#B3B3B3\", text: messageDisabled };\r\n    }\r\n    if (hover) {\r\n      if (selected) {\r\n        return { color: \"#E62E7A\", text: messageSelected };\r\n      }\r\n      return { color: \"#2EA8E6\", text: messageDefault };\r\n    }\r\n    if (selected && !hover) {\r\n      return { color: \"#D91667\", text: messageSelected };\r\n    }\r\n    return { color: \"#1698D9\", text: messageDefault };\r\n  };\r\n  const declOfNum = (number, titles) => {\r\n    const cases = [2, 0, 1, 1, 1, 2];\r\n    return titles[\r\n      number % 100 > 4 && number % 100 < 20\r\n        ? 2\r\n        : cases[number % 10 < 5 ? number % 10 : 5]\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card-wrapper\">\r\n        <div\r\n          className=\"card-border\"\r\n          style={{\r\n            backgroundColor: setColorTextState().color,\r\n          }}\r\n        >\r\n          <div\r\n            className={`card ${data.quantity <= 0 && \"card--disabled\"}`}\r\n            onClick={selectedHandler}\r\n            onMouseEnter={() => setHover(true)}\r\n            onMouseLeave={() => setHover(false)}\r\n          >\r\n            <div className=\"card-content\">\r\n              {!selected || data.quantity <= 0 ? (\r\n                <a href=\"#\" className=\"card-name\">\r\n                  Сказочное заморское яство\r\n                </a>\r\n              ) : (\r\n                <a href=\"#\" className=\"card-name card-name--pink\">\r\n                  Котэ не одобряет?\r\n                </a>\r\n              )}\r\n\r\n              <h2 className=\"card-title\">{data.title}</h2>\r\n              <span className=\"card-taste\">{data.taste}</span>\r\n              <span className=\"card-portions\">\r\n                <strong>{data.portions}</strong> порций\r\n              </span>\r\n              <div className=\"card-gift\">\r\n                {data.gift > 1 && <strong>{data.gift}</strong>}\r\n                {declOfNum(+data.gift, [\"мышь\", \"мыши\", \"мышей\"])} в подарок\r\n              </div>\r\n              {data.isHappy && (\r\n                <div className=\"card-gift\">заказчик доволен</div>\r\n              )}\r\n\r\n              <div className=\"card-img\" />\r\n              <div\r\n                className=\"weight-container\"\r\n                style={{ backgroundColor: setColorTextState().color }}\r\n              >\r\n                <div className=\"weight-text weight-text--value\">\r\n                  {data.weight}\r\n                </div>\r\n                <div className=\"weight-text\">кг</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`card-description ${\r\n            data.quantity <= 0 && \"card-description--disabled\"\r\n          }`}\r\n        >\r\n          {selected || data.quantity <= 0 ? (\r\n            setColorTextState().text\r\n          ) : (\r\n            <>\r\n              {`${setColorTextState().text}`}\r\n              <a\r\n                href=\"#\"\r\n                class=\"link\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  selectedHandler();\r\n                }}\r\n              >\r\n                Купи\r\n              </a>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../Card\";\r\nimport \"./style.css\";\r\n\r\nconst Main = ({ data = [] }) => {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"main-shadow\" />\r\n      <div className=\"main-wrapper\">\r\n        <h1 className=\"main-title\">Ты сегодня покормил кота?</h1>\r\n        <div className=\"card-container\">\r\n          {data.map((el, i) => (\r\n            <Card data={el} key={i} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","export const data = [\r\n  {\r\n    like: true,\r\n    name: \"Сказочное заморское яство\",\r\n    title: \"Нямушка\",\r\n    taste: \"с фуа-гра\",\r\n    portions: \"10 \",\r\n    gift: \"1\",\r\n    isHappy: false,\r\n    borderColor: \"#1698d9\",\r\n    weight: \"0,5\",\r\n    quantity: 2,\r\n    messageDefault: \"Чего сидишь? Порадуй котэ \",\r\n    messageDisabled: \"Печалька с курой закончился\",\r\n    messageSelected: \"Печень утки разварная с артишоками\",\r\n  },\r\n  {\r\n    like: true,\r\n    name: \"Сказочное заморское яство\",\r\n    title: \"Нямушка\",\r\n    taste: \"с рыбой\",\r\n    portions: \"40 \",\r\n    gift: \"2 \",\r\n    isHappy: false,\r\n    borderColor: \"#d91667\",\r\n    weight: \"2\",\r\n    messageDefault: \"Чего сидишь? Порадуй котэ \",\r\n    messageDisabled: \"Печалька с курой закончился\",\r\n    messageSelected: \"Головы щучьи с чесноком да свежайшая сёмгушка\",\r\n    quantity: 5,\r\n  },\r\n  {\r\n    like: false,\r\n    name: \"Котэ не одобряет?\",\r\n    title: \"Нямушка\",\r\n    taste: \"с курой\",\r\n    portions: \"10 \",\r\n    gift: \"5 \",\r\n    isHappy: true,\r\n    borderColor: \"#1698d9\",\r\n    weight: \"5\",\r\n    messageDefault: \"Чего сидишь? Порадуй котэ \",\r\n    messageDisabled: \"Печалька с курой закончился\",\r\n    messageSelected: \"Филе из циплят с трюфелями в бульоне\",\r\n    quantity: 0,\r\n  },\r\n];\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport { data } from \"./mock\";\n\nfunction App() {\n  return <Main data={data} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}